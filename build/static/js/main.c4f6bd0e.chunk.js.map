{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","baseUrl","services_notes","axios","get","then","response","data","newObject","post","update","id","console","log","put","concat","Notification","message","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initnotes","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","note_new","catch","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","new_note","reason","value","onChange","target","type","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c4f6bd0e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n    const response = axios.get(baseUrl)\n    return response.then(response => response.data);\n}\n\nconst create = newObject => {\n    const response = axios.post(baseUrl, newObject)\n    return response.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    console.log(update, id)\n    const response = axios.put(`${baseUrl}/${id}`, newObject);\n    return response.then(response => response.data)\n}\n\nexport default {getAll, create, update}","import React from 'react';\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    noteService.getAll()\n      .then(initnotes => {\n        setNotes(initnotes)\n      })\n  }, [])\n\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id) /* find a reference to the associated note */\n    const changedNote = { ...note, important: !note.important }\n    noteService.update(id, changedNote).then(note_new => \n      /* replace notes database with original, expect specific one modified */\n      setNotes(notes.map(note => note.id !== id ? note : note_new))\n    ).catch(() => {\n      setErrorMessage(`${note.message} was already removed`);\n      setTimeout(() => { setErrorMessage(\"\") }, 1000);\n    })\n    setNotes(notes)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n  \n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService.create(noteObject)\n      .then(new_note => {\n        setNotes(notes.concat(new_note))\n        setNewNote('')\n      }).catch((reason) => console.log(reason))\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote} \n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'  \nimport './index.css'\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}